
ReusableSettings:
  Nodular: &nodular
    arguments:
      -
        name: Node
        type: Node
        doc: The node we are referencing
    

Types:
  - Text
  - Regexp
  - Node
  - Position

Functions:
  Base:
    var:
      opens: Text
      alias: $
      returns: Text
      arguments:
        -
          name: Name
          doc: The name of the var. Something like $name or var('name')
        -
          name: Value
          doc: The value you want to set the var to. Same as var('name') { set('value') }
          expansion: true
    time:
      returns: Text
      doc: If given a block, it returns the time-to-execute as a string (time units vary by implementation)
    debug:
      doc: Placeholder function for any engine-specific debug duties.
      returns: Text
      hide: true
      debug: true
      arguments:
        -
          name: Debug ID
          doc: Whatever ID you give it, that will be how the project is written down in the debug database!
    match:
      doc: 
      returns: Text
      arguments:
        -
          name: Match Target
          doc: What are we matching against? 
    log:
      opens: Text
      doc: Writes out a string to the console and debug log
      returns: Text
      arguments:
        - 
          name: Log message
          doc: Debug Line! Just type something!
    not_text:
      doc: Used with match($var, not('hi'))
      hide: true
      returns: Text
      return_doc: Either "true" or "false"
      arguments:
        -
          name: Text
          doc: Text to match with. Only perfect match
    not_regexp:
      doc: Used with match($var, not(/hi/))
      hide: true
      returns: Text
      return_doc: Either "true" or "false"
      arguments:
        -
          name: Regexp
          doc: Regexp to match with.
    with_text:
      doc: Used with match($var, 'hi')
      hide: true
      returns: Text
      return_doc: Either "true" or "false"
      arguments:
        -
          name: Text
          doc: Text to match with. Only perfect match
    with_regexp:
      doc: Used with match($var, /hi/)
      hide: true
      returns: Text
      return_doc: Either "true" or "false"
      arguments:
        -
          name: Regexp
          doc: Regexp to match with.
    regexp:
      opens: Text
      returns: Regexp
      doc: Any value passed into this function will return a regex --- ready for fancy replace() or match() usage. NOTE! Use hard-coded regex if you can. This is much slower than hard-coding regex!
      hide: true
      arguments:
        -
          name: Expression
          doc: The regular expression you want built
    concat:
      opens: Text
      returns: Text
      doc: A function for concatenating strings. Can accept 2 or more args
      arguments:
        -
          name: First Value
        -
          name: Second Value
    export:
      opens: Text
      returns: Text
      doc: This is a the way that we have Tritium communicate variables back to its execution environment. That sounds complicated, but in most uses of Tritium, it would be something like export("Content-Type", "application/js") to tell the app to change the content-type. Look at the reference for your server for more information on what you can export.
      arguments:
        -
          name: Key name
          type: Text
    upcase:
      returns: Text
      doc: Returns the input argument in ALL CAPS
      arguments:
        -
          name: Input String
          type: Text
    downcase:
      returns: Text
      doc: Returns the input argument in lower case
      arguments:
        -
          name: Input String
          type: Text
  NodeExtensions:
    inherit: Base
    index:
      returns: Text
      doc: Returns the index of the last node scoped
      arguments:
        -
          name: Node
          doc: Use the node.1 function to pass in the node reference
          type: Node
    fetch:
      opens: Text
      returns: Text
      doc: This is how you select an element to pass it to a function.
      arguments:
        -
          name: Selector
          type: Text
          doc: A properly formatted XPath selector that starts with "./" or ".." or "//" depending on the scope you want. "./" is HIGHLY recommended
    node:
      opens: Node
      returns: Node
      doc: This is how you access the node stack. The current node is node(1), and the parent node is node(2)
      arguments:
        -
          name: Index
          type: Text
          doc: The index of the node that you want
  Node:
    inherit: Base
    select: 
      doc: Search the tree and select all matching nodes
      alias: $()
      returns: Node
      arguments:
        - 
          name: XPath Selector
          type: Text
          doc: A properly formatted XPath selector that starts with "./" or ".." or "//" depending on the scope you want. "./" is HIGHLY recommended
    text:
      opens: Text
      doc: Opens up the contents to text modification. All XML will get escaped.
      returns: Text
    attribute:
      opens: Attribute
      doc: Creates or opens the attribute named. Returns the value()
      returns: Text
      arguments:
        -
          name: Name
          type: Text
          doc: The name of the attribute you are opening
    move:
      doc: Move the first node, to the second node.
      positional: true
      returns: Node
      arguments:
        -
          name: What
          type: Node
          doc: The Node that we are moving
        -
          name: Where
          type: Node
          doc: The Node that we are moving to (relative to specified position)
    dup:
      doc: Copies the node and yields to it
      returns: Node
    name:
      opens: Text
      doc: Open's the node's name the currently select Node's name. Aka, change a "div" to a "span"
      returns: Text
    remove:
      doc: Delete the current node
      returns: false
    inject:
      doc: Inject some HTML into the node at the prescribed location
      positional: true
      arguments:
        -
          name: HTML
          type: Text
    insert:
      doc: Create a new node and insert it at the location specified
      positional: true
      arguments:
        - 
          name: Tag Name
          default: "div"
          doc: The type of HTML node you want, aka "div" or "span"
  XMLNode:
    inherit: Node
    cdata:
      doc: Replace's the node's contents with a CDATA block
      returns: true
      arguments:
        -
          name: Contents
          doc: Whatever should go inside the CDATA.
    inner:
      opens: Text
      doc: Opens up the entire innerHTML to text modification. Any html you insert WILL get interpreted as actual tags.
    wrap_text_children:
      doc: Wraps each text child inside the specified tag. Only the text children though!
      arguments:
        -
          name: Tag Name
          type: Text
  Attribute:
    inherit: Base
    remove:
      doc: Delete the current attribute
    value:
      opens: Text
      returns: Text
      doc: Allow us to edit the value (key="value") part of the attribute
    name:
      opens: Text
      returns: Text
      doc: Allow us to edit the key (key="value") part of the attribute
  Text:
    inherit: Base
    text:
      opens: Text
      doc: Returns the current text scope as a string. Useful to pass the current Text as an argument
      returns: true
    set:
      doc: Replace the entire current text with what you pass in
      arguments:
        -
          name: Value
          doc: The string you want to replace the whole thing with!
    replace:
      doc: Replace all instances of the first argument with the second argument. This yields to a Text scope that allows you to set the Replacement string. Very powerful stuff. Look at the examples.
      opens: Text
      arguments:
        -
          name: Regex
          type: Regexp
    xml:
      doc: Parses the document as XML and passes you back an XMLNode scope
      opens: XMLNode
      returns: Text
    html:
      doc: Parses the document as HTML and passes you back an XMLNode scope
      opens: XMLNode
      returns: Text
    html_fragment:
      doc: Parses the document as HTML and passes you back an XMLNode scope
      opens: XMLNode
      returns: Text
    prepend:
      doc: Prepend the string to the front of the text area
      arguments: 
        -
          name: Text to prepend
    append:
      doc: Append the string to the front of the text area
      arguments: 
        -
          name: Text to append